// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240115102103_seeding_data_user")]
    partial class seeding_data_user
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint");

                    b.Property<short>("FreeParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<short>("NightParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("ShortTermParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("TypeOfParkingSystem")
                        .HasColumnType("smallint");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 10, 21, 3, 330, DateTimeKind.Utc).AddTicks(6435));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 10, 21, 3, 330, DateTimeKind.Utc).AddTicks(6563));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8fc45133-a5c0-4f7f-9d50-30f03e623a4d"),
                            Created = new DateTime(2024, 1, 15, 10, 21, 3, 332, DateTimeKind.Utc).AddTicks(853),
                            Email = "giapp@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 15, 10, 21, 3, 332, DateTimeKind.Utc).AddTicks(855),
                            PasswordHash = new byte[] { 104, 138, 179, 72, 89, 35, 135, 249, 99, 35, 124, 7, 83, 93, 22, 134, 109, 44, 36, 45, 232, 219, 99, 235, 170, 21, 71, 35, 138, 50, 151, 184, 30, 227, 132, 169, 205, 201, 67, 3, 115, 70, 158, 26, 142, 209, 33, 112, 116, 116, 250, 196, 174, 83, 81, 250, 114, 110, 197, 130, 208, 180, 69, 184 },
                            PasswordSalt = new byte[] { 142, 134, 164, 1, 52, 58, 238, 96, 175, 146, 174, 174, 233, 9, 188, 121, 109, 67, 45, 16, 173, 215, 38, 187, 244, 169, 142, 234, 253, 222, 126, 181, 6, 204, 187, 234, 179, 112, 72, 114, 54, 140, 195, 245, 250, 229, 3, 166, 30, 177, 46, 105, 233, 221, 72, 90, 71, 148, 56, 158, 109, 81, 217, 114, 243, 143, 191, 181, 89, 167, 49, 132, 42, 102, 31, 46, 17, 244, 120, 128, 47, 92, 104, 187, 27, 143, 251, 1, 200, 10, 69, 112, 178, 213, 206, 239, 228, 43, 12, 212, 51, 171, 139, 13, 242, 19, 248, 248, 155, 2, 185, 255, 152, 94, 120, 7, 143, 97, 133, 152, 59, 82, 53, 45, 145, 132, 132, 70 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("5a82a9b3-1788-417a-87c6-21e611fb9436"),
                            Created = new DateTime(2024, 1, 15, 10, 21, 3, 332, DateTimeKind.Utc).AddTicks(858),
                            Email = "giapp1@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 15, 10, 21, 3, 332, DateTimeKind.Utc).AddTicks(858),
                            PasswordHash = new byte[] { 104, 138, 179, 72, 89, 35, 135, 249, 99, 35, 124, 7, 83, 93, 22, 134, 109, 44, 36, 45, 232, 219, 99, 235, 170, 21, 71, 35, 138, 50, 151, 184, 30, 227, 132, 169, 205, 201, 67, 3, 115, 70, 158, 26, 142, 209, 33, 112, 116, 116, 250, 196, 174, 83, 81, 250, 114, 110, 197, 130, 208, 180, 69, 184 },
                            PasswordSalt = new byte[] { 142, 134, 164, 1, 52, 58, 238, 96, 175, 146, 174, 174, 233, 9, 188, 121, 109, 67, 45, 16, 173, 215, 38, 187, 244, 169, 142, 234, 253, 222, 126, 181, 6, 204, 187, 234, 179, 112, 72, 114, 54, 140, 195, 245, 250, 229, 3, 166, 30, 177, 46, 105, 233, 221, 72, 90, 71, 148, 56, 158, 109, 81, 217, 114, 243, 143, 191, 181, 89, 167, 49, 132, 42, 102, 31, 46, 17, 244, 120, 128, 47, 92, 104, 187, 27, 143, 251, 1, 200, 10, 69, 112, 178, 213, 206, 239, 228, 43, 12, 212, 51, 171, 139, 13, 242, 19, 248, 248, 155, 2, 185, 255, 152, 94, 120, 7, 143, 97, 133, 152, 59, 82, 53, 45, 145, 132, 132, 70 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarPark")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "User")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavorite")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavorite")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
