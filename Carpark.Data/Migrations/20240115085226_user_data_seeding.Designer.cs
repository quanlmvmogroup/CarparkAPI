// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240115085226_user_data_seeding")]
    partial class user_data_seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint");

                    b.Property<short>("TypeOfParkingSystem")
                        .HasColumnType("smallint");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarparkDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<string>("CarParkNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("FreeParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<short>("NightParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("ShortTermParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("FreeParking");

                    b.HasIndex("GantryHeight");

                    b.HasIndex("NightParking");

                    b.ToTable("car_park_detail", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 8, 52, 26, 685, DateTimeKind.Utc).AddTicks(1459));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 8, 52, 26, 685, DateTimeKind.Utc).AddTicks(1600));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("761d22ae-40a2-4a81-9412-fd618242d44d"),
                            Created = new DateTime(2024, 1, 15, 8, 52, 26, 687, DateTimeKind.Utc).AddTicks(3452),
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 15, 8, 52, 26, 687, DateTimeKind.Utc).AddTicks(3455),
                            PasswordHash = new byte[] { 11, 231, 75, 93, 20, 118, 100, 134, 29, 37, 239, 160, 34, 255, 230, 66, 220, 9, 198, 14, 83, 216, 12, 195, 204, 212, 239, 62, 93, 158, 109, 152, 209, 88, 233, 122, 67, 51, 202, 56, 103, 86, 72, 41, 73, 35, 206, 200, 64, 253, 222, 106, 149, 100, 158, 194, 200, 145, 17, 82, 174, 195, 250, 182, 33, 225, 236, 213, 4, 42, 214, 130, 21, 40, 163, 53, 93, 98, 185, 188, 175, 95, 143, 39, 213, 214, 105, 150, 70, 247, 88, 126, 100, 39, 179, 141, 205, 119, 50, 121, 102, 45, 150, 230, 6, 240, 33, 166, 10, 120, 159, 115, 210, 38, 26, 206, 65, 233, 111, 41, 237, 18, 213, 67, 65, 9, 20, 195 },
                            PasswordSalt = new byte[] { 98, 13, 115, 82, 254, 129, 253, 51, 131, 252, 130, 185, 5, 154, 77, 66, 238, 249, 247, 189, 18, 188, 162, 100, 226, 63, 97, 163, 102, 168, 121, 34, 198, 216, 161, 177, 212, 218, 116, 233, 117, 166, 22, 93, 140, 194, 23, 251, 60, 223, 244, 21, 150, 8, 104, 45, 20, 169, 57, 246, 91, 84, 166, 117 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("b0878ab8-f58a-43d4-8acd-ea3f51f22fcd"),
                            Created = new DateTime(2024, 1, 15, 8, 52, 26, 687, DateTimeKind.Utc).AddTicks(3457),
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 15, 8, 52, 26, 687, DateTimeKind.Utc).AddTicks(3457),
                            PasswordHash = new byte[] { 11, 231, 75, 93, 20, 118, 100, 134, 29, 37, 239, 160, 34, 255, 230, 66, 220, 9, 198, 14, 83, 216, 12, 195, 204, 212, 239, 62, 93, 158, 109, 152, 209, 88, 233, 122, 67, 51, 202, 56, 103, 86, 72, 41, 73, 35, 206, 200, 64, 253, 222, 106, 149, 100, 158, 194, 200, 145, 17, 82, 174, 195, 250, 182, 33, 225, 236, 213, 4, 42, 214, 130, 21, 40, 163, 53, 93, 98, 185, 188, 175, 95, 143, 39, 213, 214, 105, 150, 70, 247, 88, 126, 100, 39, 179, 141, 205, 119, 50, 121, 102, 45, 150, 230, 6, 240, 33, 166, 10, 120, 159, 115, 210, 38, 26, 206, 65, 233, 111, 41, 237, 18, 213, 67, 65, 9, 20, 195 },
                            PasswordSalt = new byte[] { 98, 13, 115, 82, 254, 129, 253, 51, 131, 252, 130, 185, 5, 154, 77, 66, 238, 249, 247, 189, 18, 188, 162, 100, 226, 63, 97, 163, 102, 168, 121, 34, 198, 216, 161, 177, 212, 218, 116, 233, 117, 166, 22, 93, 140, 194, 23, 251, 60, 223, 244, 21, 150, 8, 104, 45, 20, 169, 57, 246, 91, 84, 166, 117 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarparkDetail", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarPark")
                        .WithOne("CarparkDetail")
                        .HasForeignKey("Carpark.Data.Entities.CarparkDetail", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPark");
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarPark")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "User")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("CarparkDetail")
                        .IsRequired();

                    b.Navigation("UserFavorite")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavorite")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
