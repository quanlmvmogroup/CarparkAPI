// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240118032422_change_column_name_3")]
    partial class change_column_name_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("car_park_basement");

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_decks");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_type");

                    b.Property<short>("FreeParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("free_parking");

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("gantry_height");

                    b.Property<short>("NightParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("night_parking");

                    b.Property<short>("ParkingTypeSystem")
                        .HasColumnType("smallint")
                        .HasColumnName("type_of_parking_system");

                    b.Property<short>("ShortTermParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("short_term_parking");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("x_coord");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("y_coord");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("CarParkType");

                    b.HasIndex("FreeParkingType");

                    b.HasIndex("NightParkingType");

                    b.HasIndex("ParkingTypeSystem");

                    b.HasIndex("ShortTermParkingType");

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("CarParkTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("car_park_type_name");

                    b.HasKey("Id");

                    b.ToTable("car_park_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("FreeParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("free_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("free_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("NightParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("night_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("night_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ParkingTypeSystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_of_parking_system_name");

                    b.HasKey("Id");

                    b.ToTable("parking_system_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ShortTermParkingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_term_parking_name");

                    b.HasKey("Id");

                    b.ToTable("short_term_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 3, 24, 22, 419, DateTimeKind.Utc).AddTicks(8155))
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 3, 24, 22, 419, DateTimeKind.Utc).AddTicks(8299))
                        .HasColumnName("modified");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22b85f84-cbef-4364-94f5-547223c02dac"),
                            Created = new DateTime(2024, 1, 18, 3, 24, 22, 423, DateTimeKind.Utc).AddTicks(362),
                            Email = "giapp@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 18, 3, 24, 22, 423, DateTimeKind.Utc).AddTicks(366),
                            PasswordHash = new byte[] { 187, 143, 30, 203, 192, 20, 77, 71, 206, 52, 17, 131, 111, 200, 152, 95, 192, 163, 18, 196, 182, 193, 20, 95, 65, 32, 240, 28, 7, 248, 145, 182, 3, 187, 73, 225, 198, 40, 122, 175, 16, 95, 251, 57, 40, 224, 136, 216, 104, 90, 207, 108, 136, 108, 108, 247, 155, 178, 95, 31, 222, 82, 213, 238 },
                            PasswordSalt = new byte[] { 188, 251, 121, 49, 201, 105, 71, 252, 28, 92, 26, 220, 99, 89, 59, 112, 177, 153, 252, 127, 43, 208, 205, 26, 149, 138, 255, 44, 232, 2, 21, 150, 173, 160, 12, 21, 164, 137, 142, 126, 80, 19, 205, 18, 238, 28, 163, 83, 121, 219, 166, 183, 159, 76, 81, 113, 218, 52, 122, 184, 113, 11, 138, 189, 36, 96, 110, 191, 150, 150, 18, 160, 112, 186, 54, 8, 153, 171, 115, 53, 86, 49, 226, 162, 2, 178, 84, 234, 244, 33, 121, 64, 26, 100, 255, 223, 146, 226, 227, 249, 233, 18, 233, 138, 80, 241, 110, 3, 196, 157, 28, 142, 167, 5, 180, 49, 48, 181, 236, 249, 134, 33, 159, 170, 229, 114, 234, 227 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("1ae5bf5f-a8f5-457d-bac4-a9f63667742c"),
                            Created = new DateTime(2024, 1, 18, 3, 24, 22, 423, DateTimeKind.Utc).AddTicks(368),
                            Email = "giapp1@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 18, 3, 24, 22, 423, DateTimeKind.Utc).AddTicks(368),
                            PasswordHash = new byte[] { 187, 143, 30, 203, 192, 20, 77, 71, 206, 52, 17, 131, 111, 200, 152, 95, 192, 163, 18, 196, 182, 193, 20, 95, 65, 32, 240, 28, 7, 248, 145, 182, 3, 187, 73, 225, 198, 40, 122, 175, 16, 95, 251, 57, 40, 224, 136, 216, 104, 90, 207, 108, 136, 108, 108, 247, 155, 178, 95, 31, 222, 82, 213, 238 },
                            PasswordSalt = new byte[] { 188, 251, 121, 49, 201, 105, 71, 252, 28, 92, 26, 220, 99, 89, 59, 112, 177, 153, 252, 127, 43, 208, 205, 26, 149, 138, 255, 44, 232, 2, 21, 150, 173, 160, 12, 21, 164, 137, 142, 126, 80, 19, 205, 18, 238, 28, 163, 83, 121, 219, 166, 183, 159, 76, 81, 113, 218, 52, 122, 184, 113, 11, 138, 189, 36, 96, 110, 191, 150, 150, 18, 160, 112, 186, 54, 8, 153, 171, 115, 53, 86, 49, 226, 162, 2, 178, 84, 234, 244, 33, 121, 64, 26, 100, 255, 223, 146, 226, 227, 249, 233, 18, 233, 138, 80, 241, 110, 3, 196, 157, 28, 142, 167, 5, 180, 49, 48, 181, 236, 249, 134, 33, 159, 170, 229, 114, 234, 227 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("CarParkNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.HasKey("UserId");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarParkType", "CarParkTypeNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("CarParkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.FreeParkingType", "FreeParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("FreeParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.NightParkingType", "NightParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("NightParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ParkingTypeSystem", "TypeOfParkingSystemNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ParkingTypeSystem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ShortTermParkingType", "ShortTermParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ShortTermParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkTypeNavigation");

                    b.Navigation("FreeParkingNavigation");

                    b.Navigation("NightParkingNavigation");

                    b.Navigation("ShortTermParkingNavigation");

                    b.Navigation("TypeOfParkingSystemNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarParkNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "UserNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
