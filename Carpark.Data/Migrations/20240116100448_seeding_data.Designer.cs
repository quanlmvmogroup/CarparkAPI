// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240116100448_seeding_data")]
    partial class seeding_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("car_park_basements");

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_decks");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_type");

                    b.Property<short>("FreeParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("free_parking");

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("ganny_height");

                    b.Property<short>("NightParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("night_parking");

                    b.Property<short>("ParkingTypeSystem")
                        .HasColumnType("smallint")
                        .HasColumnName("type_of_parking_system");

                    b.Property<short>("ShortTermParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("short_term_parking");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("x_coord");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("y_coord");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("CarParkType");

                    b.HasIndex("FreeParkingType");

                    b.HasIndex("NightParkingType");

                    b.HasIndex("ParkingTypeSystem");

                    b.HasIndex("ShortTermParkingType");

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("CarParkTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("car_park_type_name");

                    b.HasKey("Id");

                    b.ToTable("car_park_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("FreeParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("free_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("free_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("NightParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("night_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("night_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ParkingTypeSystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_of_parking_system_name");

                    b.HasKey("Id");

                    b.ToTable("parking_system_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ShortTermParkingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_term_parking_name");

                    b.HasKey("Id");

                    b.ToTable("short_term_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 16, 10, 4, 47, 931, DateTimeKind.Utc).AddTicks(5653))
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 16, 10, 4, 47, 931, DateTimeKind.Utc).AddTicks(5796))
                        .HasColumnName("modified");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd670c40-7bbd-4e8b-ae27-a73a37a6d49a"),
                            Created = new DateTime(2024, 1, 16, 10, 4, 47, 935, DateTimeKind.Utc).AddTicks(9994),
                            Email = "giapp@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 16, 10, 4, 47, 935, DateTimeKind.Utc).AddTicks(9996),
                            PasswordHash = new byte[] { 72, 40, 43, 170, 247, 141, 160, 226, 157, 155, 19, 235, 172, 205, 186, 183, 42, 50, 101, 208, 123, 185, 111, 60, 59, 180, 88, 171, 189, 246, 228, 175, 187, 231, 135, 50, 32, 96, 149, 123, 121, 62, 202, 45, 69, 130, 244, 139, 214, 178, 186, 27, 218, 253, 173, 221, 184, 25, 176, 17, 222, 229, 70, 152 },
                            PasswordSalt = new byte[] { 135, 147, 198, 89, 188, 100, 100, 36, 121, 202, 103, 205, 87, 239, 49, 56, 116, 91, 108, 97, 244, 67, 124, 156, 79, 224, 108, 243, 34, 92, 191, 188, 141, 230, 185, 224, 188, 163, 170, 131, 244, 5, 119, 200, 146, 147, 96, 33, 208, 75, 16, 98, 8, 171, 82, 154, 44, 41, 235, 247, 41, 179, 195, 254, 165, 102, 139, 230, 82, 49, 190, 209, 99, 23, 133, 202, 76, 21, 214, 56, 13, 125, 86, 134, 148, 235, 182, 161, 121, 9, 227, 226, 230, 253, 197, 236, 201, 146, 217, 29, 129, 209, 175, 16, 248, 135, 73, 141, 185, 35, 134, 173, 147, 112, 176, 149, 159, 164, 112, 194, 188, 3, 159, 44, 53, 97, 113, 239 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("a4acd67d-1861-4ea3-a464-fd4b0e35777f"),
                            Created = new DateTime(2024, 1, 16, 10, 4, 47, 935, DateTimeKind.Utc).AddTicks(9999),
                            Email = "giapp1@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 16, 10, 4, 47, 935, DateTimeKind.Utc).AddTicks(9999),
                            PasswordHash = new byte[] { 72, 40, 43, 170, 247, 141, 160, 226, 157, 155, 19, 235, 172, 205, 186, 183, 42, 50, 101, 208, 123, 185, 111, 60, 59, 180, 88, 171, 189, 246, 228, 175, 187, 231, 135, 50, 32, 96, 149, 123, 121, 62, 202, 45, 69, 130, 244, 139, 214, 178, 186, 27, 218, 253, 173, 221, 184, 25, 176, 17, 222, 229, 70, 152 },
                            PasswordSalt = new byte[] { 135, 147, 198, 89, 188, 100, 100, 36, 121, 202, 103, 205, 87, 239, 49, 56, 116, 91, 108, 97, 244, 67, 124, 156, 79, 224, 108, 243, 34, 92, 191, 188, 141, 230, 185, 224, 188, 163, 170, 131, 244, 5, 119, 200, 146, 147, 96, 33, 208, 75, 16, 98, 8, 171, 82, 154, 44, 41, 235, 247, 41, 179, 195, 254, 165, 102, 139, 230, 82, 49, 190, 209, 99, 23, 133, 202, 76, 21, 214, 56, 13, 125, 86, 134, 148, 235, 182, 161, 121, 9, 227, 226, 230, 253, 197, 236, 201, 146, 217, 29, 129, 209, 175, 16, 248, 135, 73, 141, 185, 35, 134, 173, 147, 112, 176, 149, 159, 164, 112, 194, 188, 3, 159, 44, 53, 97, 113, 239 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.HasKey("UserId", "CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarParkType", "CarParkTypeNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("CarParkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.FreeParkingType", "FreeParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("FreeParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.NightParkingType", "NightParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("NightParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ParkingTypeSystem", "TypeOfParkingSystemNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ParkingTypeSystem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ShortTermParkingType", "ShortTermParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ShortTermParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkTypeNavigation");

                    b.Navigation("FreeParkingNavigation");

                    b.Navigation("NightParkingNavigation");

                    b.Navigation("ShortTermParkingNavigation");

                    b.Navigation("TypeOfParkingSystemNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarParkNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "UserNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
