// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240115093843_remove_carpark_detail")]
    partial class remove_carpark_detail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint");

                    b.Property<short>("FreeParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<short>("NightParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("ShortTermParking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("TypeOfParkingSystem")
                        .HasColumnType("smallint");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 9, 38, 42, 901, DateTimeKind.Utc).AddTicks(2495));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 15, 9, 38, 42, 901, DateTimeKind.Utc).AddTicks(2632));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("868e4f5e-bdf5-4b3b-9209-df11cc7e53ee"),
                            Created = new DateTime(2024, 1, 15, 9, 38, 42, 902, DateTimeKind.Utc).AddTicks(9743),
                            Email = "giapp@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 15, 9, 38, 42, 902, DateTimeKind.Utc).AddTicks(9745),
                            PasswordHash = new byte[] { 161, 169, 129, 239, 45, 5, 48, 122, 21, 171, 52, 73, 190, 42, 126, 253, 182, 108, 118, 236, 76, 130, 19, 5, 240, 218, 62, 164, 255, 79, 142, 94, 103, 214, 142, 56, 27, 197, 128, 216, 199, 208, 250, 174, 131, 22, 228, 40, 68, 182, 69, 124, 139, 143, 82, 78, 63, 206, 192, 105, 141, 197, 208, 237, 198, 6, 201, 189, 198, 103, 204, 245, 245, 213, 247, 177, 53, 0, 162, 62, 190, 245, 32, 235, 202, 35, 67, 68, 221, 33, 127, 147, 217, 177, 27, 237, 247, 247, 77, 9, 50, 107, 97, 142, 236, 76, 39, 155, 147, 39, 37, 79, 243, 250, 80, 48, 126, 61, 136, 156, 225, 207, 131, 43, 245, 230, 17, 194 },
                            PasswordSalt = new byte[] { 242, 252, 255, 170, 167, 245, 99, 202, 91, 29, 181, 33, 118, 136, 225, 153, 235, 67, 19, 244, 44, 75, 109, 162, 12, 192, 16, 241, 19, 94, 253, 223, 252, 50, 24, 197, 46, 107, 174, 130, 119, 251, 227, 220, 94, 11, 240, 62, 213, 65, 55, 174, 201, 120, 48, 83, 27, 105, 184, 214, 110, 145, 36, 220 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("3d40169a-d305-476c-8c71-159e1c275d34"),
                            Created = new DateTime(2024, 1, 15, 9, 38, 42, 902, DateTimeKind.Utc).AddTicks(9748),
                            Email = "giapp1@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 15, 9, 38, 42, 902, DateTimeKind.Utc).AddTicks(9748),
                            PasswordHash = new byte[] { 161, 169, 129, 239, 45, 5, 48, 122, 21, 171, 52, 73, 190, 42, 126, 253, 182, 108, 118, 236, 76, 130, 19, 5, 240, 218, 62, 164, 255, 79, 142, 94, 103, 214, 142, 56, 27, 197, 128, 216, 199, 208, 250, 174, 131, 22, 228, 40, 68, 182, 69, 124, 139, 143, 82, 78, 63, 206, 192, 105, 141, 197, 208, 237, 198, 6, 201, 189, 198, 103, 204, 245, 245, 213, 247, 177, 53, 0, 162, 62, 190, 245, 32, 235, 202, 35, 67, 68, 221, 33, 127, 147, 217, 177, 27, 237, 247, 247, 77, 9, 50, 107, 97, 142, 236, 76, 39, 155, 147, 39, 37, 79, 243, 250, 80, 48, 126, 61, 136, 156, 225, 207, 131, 43, 245, 230, 17, 194 },
                            PasswordSalt = new byte[] { 242, 252, 255, 170, 167, 245, 99, 202, 91, 29, 181, 33, 118, 136, 225, 153, 235, 67, 19, 244, 44, 75, 109, 162, 12, 192, 16, 241, 19, 94, 253, 223, 252, 50, 24, 197, 46, 107, 174, 130, 119, 251, 227, 220, 94, 11, 240, 62, 213, 65, 55, 174, 201, 120, 48, 83, 27, 105, 184, 214, 110, 145, 36, 220 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarPark")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "User")
                        .WithOne("UserFavorite")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavorite")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavorite")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
