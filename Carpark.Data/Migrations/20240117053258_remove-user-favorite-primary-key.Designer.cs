// <auto-generated />
using System;
using Carpark.Data.CarparkDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Data.Migrations
{
    [DbContext(typeof(CarparkDbContext.CarparkDbContext))]
    [Migration("20240117053258_remove-user-favorite-primary-key")]
    partial class removeuserfavoriteprimarykey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("address");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("car_park_basements");

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_decks");

                    b.Property<short>("CarParkType")
                        .HasColumnType("smallint")
                        .HasColumnName("car_park_type");

                    b.Property<short>("FreeParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("free_parking");

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("ganny_height");

                    b.Property<short>("NightParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("night_parking");

                    b.Property<short>("ParkingTypeSystem")
                        .HasColumnType("smallint")
                        .HasColumnName("type_of_parking_system");

                    b.Property<short>("ShortTermParkingType")
                        .HasColumnType("smallint")
                        .HasColumnName("short_term_parking");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("x_coord");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("y_coord");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("CarParkType");

                    b.HasIndex("FreeParkingType");

                    b.HasIndex("NightParkingType");

                    b.HasIndex("ParkingTypeSystem");

                    b.HasIndex("ShortTermParkingType");

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("CarParkTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("car_park_type_name");

                    b.HasKey("Id");

                    b.ToTable("car_park_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("FreeParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("free_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("free_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("NightParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("night_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("night_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ParkingTypeSystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_of_parking_system_name");

                    b.HasKey("Id");

                    b.ToTable("parking_system_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("ShortTermParkingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("short_term_parking_name");

                    b.HasKey("Id");

                    b.ToTable("short_term_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 17, 5, 32, 58, 139, DateTimeKind.Utc).AddTicks(5918))
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 1, 17, 5, 32, 58, 139, DateTimeKind.Utc).AddTicks(6081))
                        .HasColumnName("modified");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("045485cd-6feb-40fa-b713-8ae1399b5290"),
                            Created = new DateTime(2024, 1, 17, 5, 32, 58, 143, DateTimeKind.Utc).AddTicks(133),
                            Email = "giapp@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap",
                            IsActive = true,
                            LastName = "Quang Giap",
                            Modified = new DateTime(2024, 1, 17, 5, 32, 58, 143, DateTimeKind.Utc).AddTicks(135),
                            PasswordHash = new byte[] { 171, 179, 182, 214, 209, 140, 219, 61, 30, 225, 78, 225, 32, 62, 67, 171, 229, 79, 202, 79, 177, 127, 36, 197, 146, 116, 154, 250, 158, 255, 23, 107, 106, 27, 31, 247, 207, 43, 32, 234, 34, 152, 46, 118, 237, 169, 60, 61, 178, 159, 175, 115, 119, 117, 224, 5, 28, 183, 73, 129, 92, 140, 228, 204 },
                            PasswordSalt = new byte[] { 226, 114, 174, 97, 209, 31, 183, 153, 161, 95, 132, 148, 137, 98, 172, 185, 42, 237, 198, 58, 181, 84, 240, 190, 255, 98, 236, 221, 111, 29, 22, 189, 190, 241, 195, 202, 254, 62, 111, 167, 214, 12, 86, 187, 128, 1, 215, 119, 131, 53, 100, 26, 87, 69, 143, 0, 221, 203, 212, 4, 33, 121, 70, 186, 91, 170, 70, 126, 146, 53, 198, 168, 99, 255, 83, 253, 114, 129, 192, 178, 187, 91, 87, 1, 138, 251, 128, 195, 24, 143, 215, 104, 48, 110, 82, 39, 248, 219, 96, 42, 120, 222, 79, 82, 156, 47, 252, 47, 135, 232, 242, 107, 89, 130, 119, 215, 194, 229, 114, 208, 143, 237, 160, 18, 100, 128, 253, 157 },
                            UserName = "giappq"
                        },
                        new
                        {
                            Id = new Guid("ee4d9404-4c90-4624-8803-2efd316cb923"),
                            Created = new DateTime(2024, 1, 17, 5, 32, 58, 143, DateTimeKind.Utc).AddTicks(138),
                            Email = "giapp1@vmogroup.com",
                            FirstName = "Pham",
                            FullName = "Pham Quang Giap 1",
                            IsActive = true,
                            LastName = "Quang Giap 1",
                            Modified = new DateTime(2024, 1, 17, 5, 32, 58, 143, DateTimeKind.Utc).AddTicks(138),
                            PasswordHash = new byte[] { 171, 179, 182, 214, 209, 140, 219, 61, 30, 225, 78, 225, 32, 62, 67, 171, 229, 79, 202, 79, 177, 127, 36, 197, 146, 116, 154, 250, 158, 255, 23, 107, 106, 27, 31, 247, 207, 43, 32, 234, 34, 152, 46, 118, 237, 169, 60, 61, 178, 159, 175, 115, 119, 117, 224, 5, 28, 183, 73, 129, 92, 140, 228, 204 },
                            PasswordSalt = new byte[] { 226, 114, 174, 97, 209, 31, 183, 153, 161, 95, 132, 148, 137, 98, 172, 185, 42, 237, 198, 58, 181, 84, 240, 190, 255, 98, 236, 221, 111, 29, 22, 189, 190, 241, 195, 202, 254, 62, 111, 167, 214, 12, 86, 187, 128, 1, 215, 119, 131, 53, 100, 26, 87, 69, 143, 0, 221, 203, 212, 4, 33, 121, 70, 186, 91, 170, 70, 126, 146, 53, 198, 168, 99, 255, 83, 253, 114, 129, 192, 178, 187, 91, 87, 1, 138, 251, 128, 195, 24, 143, 215, 104, 48, 110, 82, 39, 248, 219, 96, 42, 120, 222, 79, 82, 156, 47, 252, 47, 135, 232, 242, 107, 89, 130, 119, 215, 194, 229, 114, 208, 143, 237, 160, 18, 100, 128, 253, 157 },
                            UserName = "giappq1"
                        });
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("CarParkNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("car_park_no");

                    b.HasKey("UserId");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarParkType", "CarParkTypeNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("CarParkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.FreeParkingType", "FreeParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("FreeParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.NightParkingType", "NightParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("NightParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ParkingTypeSystem", "TypeOfParkingSystemNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ParkingTypeSystem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.ShortTermParkingType", "ShortTermParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ShortTermParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkTypeNavigation");

                    b.Navigation("FreeParkingNavigation");

                    b.Navigation("NightParkingNavigation");

                    b.Navigation("ShortTermParkingNavigation");

                    b.Navigation("TypeOfParkingSystemNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Data.Entities.CarPark", "CarParkNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "UserNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Data.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Data.Entities.CarParkType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.FreeParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.NightParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ParkingTypeSystem", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.ShortTermParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
