// <auto-generated />
using System;
using Carpark.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Carpark.Infrastructure.Migrations
{
    [DbContext(typeof(CarparkDbContext))]
    [Migration("20240118090758_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.26");

            modelBuilder.Entity("Carpark.Core.Entities.CarPark", b =>
                {
                    b.Property<string>("CarParkNo")
                        .HasColumnType("TEXT")
                        .HasColumnName("car_park_no");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<short>("CarParkBasement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue((short)0)
                        .HasColumnName("car_park_basement");

                    b.Property<short>("CarParkDeck")
                        .HasColumnType("INTEGER")
                        .HasColumnName("car_park_decks");

                    b.Property<short>("CarParkType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("car_park_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 649, DateTimeKind.Utc).AddTicks(9537))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<short>("FreeParkingType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("free_parking");

                    b.Property<decimal>("GantryHeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(0m)
                        .HasColumnName("gantry_height");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 649, DateTimeKind.Utc).AddTicks(9692))
                        .HasColumnName("modified_at");

                    b.Property<short>("NightParkingType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("night_parking");

                    b.Property<short>("ParkingTypeSystem")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_of_parking_system");

                    b.Property<short>("ShortTermParkingType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("short_term_parking");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("TEXT")
                        .HasColumnName("x_coord");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("TEXT")
                        .HasColumnName("y_coord");

                    b.HasKey("CarParkNo");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("CarParkType");

                    b.HasIndex("FreeParkingType");

                    b.HasIndex("NightParkingType");

                    b.HasIndex("ParkingTypeSystem");

                    b.HasIndex("ShortTermParkingType");

                    b.ToTable("car_park", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.CarParkType", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("CarParkTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("car_park_type_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(6693))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(6833))
                        .HasColumnName("modified_at");

                    b.HasKey("Id");

                    b.ToTable("car_park_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.FreeParkingType", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(7271))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("FreeParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("free_parking_type_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(7384))
                        .HasColumnName("modified_at");

                    b.HasKey("Id");

                    b.ToTable("free_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.NightParkingType", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(8556))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(8665))
                        .HasColumnName("modified_at");

                    b.Property<string>("NightParkingTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("night_parking_type_name");

                    b.HasKey("Id");

                    b.ToTable("night_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.ParkingTypeSystem", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(7892))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(8004))
                        .HasColumnName("modified_at");

                    b.Property<string>("ParkingTypeSystemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("type_of_parking_system_name");

                    b.HasKey("Id");

                    b.ToTable("parking_system_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.ShortTermParkingType", b =>
                {
                    b.Property<short?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(9171))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 651, DateTimeKind.Utc).AddTicks(9288))
                        .HasColumnName("modified_at");

                    b.Property<string>("ShortTermParkingName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("short_term_parking_name");

                    b.HasKey("Id");

                    b.ToTable("short_term_parking_type", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.UserFavorite", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("CarParkNo")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("car_park_no");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 652, DateTimeKind.Utc).AddTicks(3579))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 652, DateTimeKind.Utc).AddTicks(3967))
                        .HasColumnName("modified_at");

                    b.HasKey("UserId");

                    b.HasIndex("CarParkNo")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_favorite", (string)null);
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 649, DateTimeKind.Utc).AddTicks(6901))
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue(new DateTime(2024, 1, 18, 9, 7, 58, 649, DateTimeKind.Utc).AddTicks(7011))
                        .HasColumnName("modified_at");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasColumnName("password_salt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Carpark.Core.Entities.CarPark", b =>
                {
                    b.HasOne("Carpark.Core.Entities.CarParkType", "CarParkTypeNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("CarParkType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Core.Entities.FreeParkingType", "FreeParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("FreeParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Core.Entities.NightParkingType", "NightParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("NightParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Core.Entities.ParkingTypeSystem", "TypeOfParkingSystemNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ParkingTypeSystem")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Core.Entities.ShortTermParkingType", "ShortTermParkingNavigation")
                        .WithMany("CarParkNavigation")
                        .HasForeignKey("ShortTermParkingType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkTypeNavigation");

                    b.Navigation("FreeParkingNavigation");

                    b.Navigation("NightParkingNavigation");

                    b.Navigation("ShortTermParkingNavigation");

                    b.Navigation("TypeOfParkingSystemNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.UserFavorite", b =>
                {
                    b.HasOne("Carpark.Core.Entities.CarPark", "CarParkNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Core.Entities.UserFavorite", "CarParkNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carpark.Data.Entities.User", "UserNavigation")
                        .WithOne("UserFavoriteNavigation")
                        .HasForeignKey("Carpark.Core.Entities.UserFavorite", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarParkNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.CarPark", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Carpark.Core.Entities.CarParkType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.FreeParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.NightParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.ParkingTypeSystem", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Core.Entities.ShortTermParkingType", b =>
                {
                    b.Navigation("CarParkNavigation");
                });

            modelBuilder.Entity("Carpark.Data.Entities.User", b =>
                {
                    b.Navigation("UserFavoriteNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
